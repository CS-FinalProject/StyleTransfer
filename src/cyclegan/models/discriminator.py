import torch.nn as nn
from .base_model import BaseModel


class Discriminator(BaseModel):
    """
    The discriminator predicts whether an image is real or fake, when the image is generated from the Generator.

    Input:
        - image: An image whose either real or generated by the Generator.
    Output:
        - A single value, representing the probability that the image is real.
    """

    def __init__(self):
        super().__init__()

        self.layers = nn.Sequential(
            # Input is an RGB image
            nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(64, 128, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Dropout(0.3),

            nn.Conv2d(128, 256, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(256),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(256, 512, kernel_size=3, stride=2, padding=1),
            nn.BatchNorm2d(512),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Dropout(0.3),

            # Output is a single value, representing the probability that the image is real.
            nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=1),
            nn.Flatten(),
            nn.Softmax(),
            nn.Tanh()
        )

    def forward(self, image):
        """
        Forward pass of the discriminator.
        """
        return self.layers(image)
