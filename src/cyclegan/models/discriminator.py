import torch.nn as nn
from .base_model import BaseModel


class Discriminator(BaseModel):
    """
    The discriminator predicts whether an image is real or fake, when the image is generated from the Generator.

    Input:
        - image: An image whose either real or generated by the Generator.
    Output:
        - A single value, representing the probability that the image is real.
    """

    def __init__(self, in_feacher: int = 3, out_feacher: int = 64):
        super().__init__()
        self.layers = nn.Sequential(
            nn.Conv2d(in_channels=in_feacher, out_channels=out_feacher, kernel_size=4, stride=2, padding=1, bias=False),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(in_channels=out_feacher, out_channels=2 * out_feacher, kernel_size=4, stride=2, padding=1,
                      bias=False),
            nn.InstanceNorm2d(2 * out_feacher),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(in_channels=2 * out_feacher, out_channels=4 * out_feacher, kernel_size=4, stride=2, padding=1),
            nn.InstanceNorm2d(4 * out_feacher),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(in_channels=4 * out_feacher, out_channels=8 * out_feacher, kernel_size=4, stride=1, padding=1),
            nn.InstanceNorm2d(8 * out_feacher),
            nn.LeakyReLU(0.2, inplace=True),

            nn.Conv2d(in_channels=8 * out_feacher, out_channels=1, kernel_size=4, stride=1, padding=1),
            nn.Sigmoid()
        )

    def forward(self, image):
        """
        Forward pass of the discriminator.
        """
        return self.layers(image)
